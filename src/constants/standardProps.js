// Mapping of standard HTML and SVG attribute names to prop names.
// Based off https://github.com/facebook/react/blob/main/packages/react-dom-bindings/src/shared/possibleStandardNames.js

const standardProps = {
  class: 'className',
  for: 'htmlFor',
};

[
  'accessKey',
  'allowFullScreen',
  'allowReorder',
  'attributeName',
  'attributeType',
  'autoCapitalize',
  'autoComplete',
  'autoCorrect',
  'autoFocus',
  'autoPlay',
  'autoReverse',
  'autoSave',
  'baseFrequency',
  'baseProfile',
  'calcMode',
  'cellPadding',
  'cellSpacing',
  'charSet',
  'classID',
  'className',
  'clipPathUnits',
  'colSpan',
  'contentEditable',
  'contentScriptType',
  'contentStyleType',
  'contextMenu',
  'controlsList',
  'crossOrigin',
  'dateTime',
  'diffuseConstant',
  'disablePictureInPicture',
  'disableRemotePlayback',
  'dominantBaseline',
  'edgeMode',
  'encType',
  'enterKeyHint',
  'externalResourcesRequired',
  'filterRes',
  'filterUnits',
  'fontFamily',
  'formAction',
  'formEncType',
  'formMethod',
  'formNoValidate',
  'formTarget',
  'frameBorder',
  'glyphRef',
  'gradientTransform',
  'gradientUnits',
  'hrefLang',
  'htmlFor',
  'inputMode',
  'isMap',
  'itemID',
  'itemProp',
  'itemRef',
  'itemScope',
  'itemType',
  'kernelMatrix',
  'kernelUnitLength',
  'keyParams',
  'keyPoints',
  'keySplines',
  'keyTimes',
  'keyType',
  'lengthAdjust',
  'limitingConeAngle',
  'marginHeight',
  'marginWidth',
  'markerHeight',
  'markerUnits',
  'markerWidth',
  'maskContentUnits',
  'maskUnits',
  'maxLength',
  'mediaGroup',
  'minLength',
  'noModule',
  'noValidate',
  'numOctaves',
  'paintOrder',
  'pathLength',
  'patternContentUnits',
  'patternTransform',
  'patternUnits',
  'playsInline',
  'pointerEvents',
  'pointsAtX',
  'pointsAtY',
  'pointsAtZ',
  'preserveAlpha',
  'preserveAspectRatio',
  'primitiveUnits',
  'radioGroup',
  'readOnly',
  'referrerPolicy',
  'refX',
  'refY',
  'repeatCount',
  'repeatDur',
  'requiredExtensions',
  'requiredFeatures',
  'rowSpan',
  'specularConstant',
  'specularExponent',
  'spellCheck',
  'spreadMethod',
  'srcDoc',
  'srcLang',
  'srcSet',
  'startOffset',
  'stdDeviation',
  'stitchTiles',
  'surfaceScale',
  'systemLanguage',
  'tabIndex',
  'tableValues',
  'targetX',
  'targetY',
  'textLength',
  'useMap',
  'viewBox',
  'viewTarget',
  'xChannelSelector',
  'yChannelSelector',
  'zoomAndPan',
].forEach((prop) => {
  standardProps[prop.toLowerCase()] = prop;
});

// attributes with '-' separator
[
  'accentHeight',
  'acceptCharset',
  'alignmentBaseline',
  'arabicForm',
  'baselineShift',
  'capHeight',
  'clipPath',
  'clipRule',
  'colorInterpolation',
  'colorInterpolationFilters',
  'colorProfile',
  'colorRendering',
  'dominantBaseline',
  'enableBackground',
  'fillOpacity',
  'fillRule',
  'floodColor',
  'floodOpacity',
  'fontFamily',
  'fontSize',
  'fontSizeAdjust',
  'fontStretch',
  'fontStyle',
  'fontVariant',
  'fontWeight',
  'glyphName',
  'glyphOrientationHorizontal',
  'glyphOrientationVertical',
  'horizAdvX',
  'horizOriginX',
  'httpEquiv',
  'imageRendering',
  'letterSpacing',
  'lightingColor',
  'markerEnd',
  'markerMid',
  'markerStart',
  'overlinePosition',
  'overlineThickness',
  'paintOrder',
  'panose1',
  'pointerEvents',
  'renderingIntent',
  'shapeRendering',
  'stopColor',
  'stopOpacity',
  'strikethroughPosition',
  'strikethroughThickness',
  'strokeDasharray',
  'strokeDashoffset',
  'strokeLinecap',
  'strokeLinejoin',
  'strokeMiterlimit',
  'strokeOpacity',
  'strokeWidth',
  'textAnchor',
  'textDecoration',
  'textRendering',
  'underlinePosition',
  'underlineThickness',
  'unicodeBidi',
  'unicodeRange',
  'unitsPerEm',
  'vAlphabetic',
  'vectorEffect',
  'vertAdvY',
  'vertOriginX',
  'vertOriginY',
  'vHanging',
  'vIdeographic',
  'vMathematical',
  'wordSpacing',
  'writingMode',
  'xHeight',
].forEach((prop) => {
  standardProps[prop.replace(/[^a-z]/g, (m) => `-${m}`).toLowerCase()] = prop;
});

// attributes with ':' separator
[
  'xlinkActuate',
  'xlinkArcrole',
  'xlinkHref',
  'xlinkRole',
  'xlinkShow',
  'xlinkTitle',
  'xlinkType',
  'xmlBase',
  'xmlLang',
  'xmlnsXlink',
  'xmlSpace',
].forEach((prop) => {
  standardProps[prop.replace(/[^a-z]/g, (m) => `:${m}`).toLowerCase()] = prop;
});

export { standardProps };
